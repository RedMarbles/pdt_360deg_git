// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "calibration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace doppia_protobuf {

namespace {

const ::google::protobuf::Descriptor* CameraInternalParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraInternalParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadialDistortion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadialDistortion_reflection_ = NULL;
const ::google::protobuf::Descriptor* TangentialDistortion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TangentialDistortion_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotationMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotationMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranslationVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranslationVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraCalibration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraCalibration_reflection_ = NULL;
const ::google::protobuf::Descriptor* StereoCameraCalibration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StereoCameraCalibration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_calibration_2eproto() {
  protobuf_AddDesc_calibration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "calibration.proto");
  GOOGLE_CHECK(file != NULL);
  CameraInternalParameters_descriptor_ = file->message_type(0);
  static const int CameraInternalParameters_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, k11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, k12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, k13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, k21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, k22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, k23_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, k31_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, k32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, k33_),
  };
  CameraInternalParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraInternalParameters_descriptor_,
      CameraInternalParameters::default_instance_,
      CameraInternalParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInternalParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraInternalParameters));
  RadialDistortion_descriptor_ = file->message_type(1);
  static const int RadialDistortion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadialDistortion, k1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadialDistortion, k2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadialDistortion, k3_),
  };
  RadialDistortion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadialDistortion_descriptor_,
      RadialDistortion::default_instance_,
      RadialDistortion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadialDistortion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadialDistortion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadialDistortion));
  TangentialDistortion_descriptor_ = file->message_type(2);
  static const int TangentialDistortion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TangentialDistortion, k1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TangentialDistortion, k2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TangentialDistortion, k3_),
  };
  TangentialDistortion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TangentialDistortion_descriptor_,
      TangentialDistortion::default_instance_,
      TangentialDistortion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TangentialDistortion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TangentialDistortion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TangentialDistortion));
  RotationMatrix_descriptor_ = file->message_type(3);
  static const int RotationMatrix_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, r11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, r12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, r13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, r21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, r22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, r23_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, r31_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, r32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, r33_),
  };
  RotationMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotationMatrix_descriptor_,
      RotationMatrix::default_instance_,
      RotationMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotationMatrix));
  TranslationVector_descriptor_ = file->message_type(4);
  static const int TranslationVector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationVector, t1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationVector, t2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationVector, t3_),
  };
  TranslationVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TranslationVector_descriptor_,
      TranslationVector::default_instance_,
      TranslationVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TranslationVector));
  Pose_descriptor_ = file->message_type(5);
  static const int Pose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, translation_),
  };
  Pose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pose_descriptor_,
      Pose::default_instance_,
      Pose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pose));
  CameraCalibration_descriptor_ = file->message_type(6);
  static const int CameraCalibration_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, internal_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, radial_distortion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, tangential_distortion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, pose_),
  };
  CameraCalibration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraCalibration_descriptor_,
      CameraCalibration::default_instance_,
      CameraCalibration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraCalibration));
  StereoCameraCalibration_descriptor_ = file->message_type(7);
  static const int StereoCameraCalibration_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoCameraCalibration, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoCameraCalibration, left_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoCameraCalibration, right_camera_),
  };
  StereoCameraCalibration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StereoCameraCalibration_descriptor_,
      StereoCameraCalibration::default_instance_,
      StereoCameraCalibration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoCameraCalibration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoCameraCalibration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StereoCameraCalibration));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_calibration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraInternalParameters_descriptor_, &CameraInternalParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadialDistortion_descriptor_, &RadialDistortion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TangentialDistortion_descriptor_, &TangentialDistortion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotationMatrix_descriptor_, &RotationMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TranslationVector_descriptor_, &TranslationVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pose_descriptor_, &Pose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraCalibration_descriptor_, &CameraCalibration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StereoCameraCalibration_descriptor_, &StereoCameraCalibration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_calibration_2eproto() {
  delete CameraInternalParameters::default_instance_;
  delete CameraInternalParameters_reflection_;
  delete RadialDistortion::default_instance_;
  delete RadialDistortion_reflection_;
  delete TangentialDistortion::default_instance_;
  delete TangentialDistortion_reflection_;
  delete RotationMatrix::default_instance_;
  delete RotationMatrix_reflection_;
  delete TranslationVector::default_instance_;
  delete TranslationVector_reflection_;
  delete Pose::default_instance_;
  delete Pose_reflection_;
  delete CameraCalibration::default_instance_;
  delete CameraCalibration_reflection_;
  delete StereoCameraCalibration::default_instance_;
  delete StereoCameraCalibration_reflection_;
}

void protobuf_AddDesc_calibration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021calibration.proto\022\017doppia_protobuf\"\217\001\n"
    "\030CameraInternalParameters\022\013\n\003k11\030\001 \002(\002\022\013"
    "\n\003k12\030\002 \002(\002\022\013\n\003k13\030\003 \002(\002\022\013\n\003k21\030\004 \002(\002\022\013\n"
    "\003k22\030\005 \002(\002\022\013\n\003k23\030\006 \002(\002\022\013\n\003k31\030\007 \002(\002\022\013\n\003"
    "k32\030\010 \002(\002\022\013\n\003k33\030\t \002(\002\"6\n\020RadialDistorti"
    "on\022\n\n\002k1\030\001 \002(\002\022\n\n\002k2\030\002 \001(\002\022\n\n\002k3\030\003 \001(\002\":"
    "\n\024TangentialDistortion\022\n\n\002k1\030\001 \002(\002\022\n\n\002k2"
    "\030\002 \002(\002\022\n\n\002k3\030\003 \001(\002\"\205\001\n\016RotationMatrix\022\013\n"
    "\003r11\030\001 \002(\002\022\013\n\003r12\030\002 \002(\002\022\013\n\003r13\030\003 \002(\002\022\013\n\003"
    "r21\030\004 \002(\002\022\013\n\003r22\030\005 \002(\002\022\013\n\003r23\030\006 \002(\002\022\013\n\003r"
    "31\030\007 \002(\002\022\013\n\003r32\030\010 \002(\002\022\013\n\003r33\030\t \002(\002\"7\n\021Tr"
    "anslationVector\022\n\n\002t1\030\001 \002(\002\022\n\n\002t2\030\002 \002(\002\022"
    "\n\n\002t3\030\003 \002(\002\"r\n\004Pose\0221\n\010rotation\030\001 \002(\0132\037."
    "doppia_protobuf.RotationMatrix\0227\n\013transl"
    "ation\030\002 \002(\0132\".doppia_protobuf.Translatio"
    "nVector\"\222\002\n\021CameraCalibration\022\014\n\004name\030\001 "
    "\001(\t\022F\n\023internal_parameters\030\002 \002(\0132).doppi"
    "a_protobuf.CameraInternalParameters\022<\n\021r"
    "adial_distortion\030\003 \001(\0132!.doppia_protobuf"
    ".RadialDistortion\022D\n\025tangential_distorti"
    "on\030\004 \001(\0132%.doppia_protobuf.TangentialDis"
    "tortion\022#\n\004pose\030\005 \001(\0132\025.doppia_protobuf."
    "Pose\"\232\001\n\027StereoCameraCalibration\022\014\n\004name"
    "\030\001 \001(\t\0227\n\013left_camera\030\002 \002(\0132\".doppia_pro"
    "tobuf.CameraCalibration\0228\n\014right_camera\030"
    "\003 \002(\0132\".doppia_protobuf.CameraCalibratio"
    "n", 1041);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "calibration.proto", &protobuf_RegisterTypes);
  CameraInternalParameters::default_instance_ = new CameraInternalParameters();
  RadialDistortion::default_instance_ = new RadialDistortion();
  TangentialDistortion::default_instance_ = new TangentialDistortion();
  RotationMatrix::default_instance_ = new RotationMatrix();
  TranslationVector::default_instance_ = new TranslationVector();
  Pose::default_instance_ = new Pose();
  CameraCalibration::default_instance_ = new CameraCalibration();
  StereoCameraCalibration::default_instance_ = new StereoCameraCalibration();
  CameraInternalParameters::default_instance_->InitAsDefaultInstance();
  RadialDistortion::default_instance_->InitAsDefaultInstance();
  TangentialDistortion::default_instance_->InitAsDefaultInstance();
  RotationMatrix::default_instance_->InitAsDefaultInstance();
  TranslationVector::default_instance_->InitAsDefaultInstance();
  Pose::default_instance_->InitAsDefaultInstance();
  CameraCalibration::default_instance_->InitAsDefaultInstance();
  StereoCameraCalibration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_calibration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_calibration_2eproto {
  StaticDescriptorInitializer_calibration_2eproto() {
    protobuf_AddDesc_calibration_2eproto();
  }
} static_descriptor_initializer_calibration_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CameraInternalParameters::kK11FieldNumber;
const int CameraInternalParameters::kK12FieldNumber;
const int CameraInternalParameters::kK13FieldNumber;
const int CameraInternalParameters::kK21FieldNumber;
const int CameraInternalParameters::kK22FieldNumber;
const int CameraInternalParameters::kK23FieldNumber;
const int CameraInternalParameters::kK31FieldNumber;
const int CameraInternalParameters::kK32FieldNumber;
const int CameraInternalParameters::kK33FieldNumber;
#endif  // !_MSC_VER

CameraInternalParameters::CameraInternalParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraInternalParameters::InitAsDefaultInstance() {
}

CameraInternalParameters::CameraInternalParameters(const CameraInternalParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraInternalParameters::SharedCtor() {
  _cached_size_ = 0;
  k11_ = 0;
  k12_ = 0;
  k13_ = 0;
  k21_ = 0;
  k22_ = 0;
  k23_ = 0;
  k31_ = 0;
  k32_ = 0;
  k33_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraInternalParameters::~CameraInternalParameters() {
  SharedDtor();
}

void CameraInternalParameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraInternalParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraInternalParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraInternalParameters_descriptor_;
}

const CameraInternalParameters& CameraInternalParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calibration_2eproto();
  return *default_instance_;
}

CameraInternalParameters* CameraInternalParameters::default_instance_ = NULL;

CameraInternalParameters* CameraInternalParameters::New() const {
  return new CameraInternalParameters;
}

void CameraInternalParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    k11_ = 0;
    k12_ = 0;
    k13_ = 0;
    k21_ = 0;
    k22_ = 0;
    k23_ = 0;
    k31_ = 0;
    k32_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    k33_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraInternalParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float k11 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k11_)));
          set_has_k11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_k12;
        break;
      }

      // required float k12 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k12_)));
          set_has_k12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_k13;
        break;
      }

      // required float k13 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k13_)));
          set_has_k13();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_k21;
        break;
      }

      // required float k21 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k21_)));
          set_has_k21();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_k22;
        break;
      }

      // required float k22 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k22:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k22_)));
          set_has_k22();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_k23;
        break;
      }

      // required float k23 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k23_)));
          set_has_k23();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_k31;
        break;
      }

      // required float k31 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k31:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k31_)));
          set_has_k31();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_k32;
        break;
      }

      // required float k32 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k32_)));
          set_has_k32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_k33;
        break;
      }

      // required float k33 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k33:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k33_)));
          set_has_k33();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraInternalParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float k11 = 1;
  if (has_k11()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->k11(), output);
  }

  // required float k12 = 2;
  if (has_k12()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->k12(), output);
  }

  // required float k13 = 3;
  if (has_k13()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->k13(), output);
  }

  // required float k21 = 4;
  if (has_k21()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->k21(), output);
  }

  // required float k22 = 5;
  if (has_k22()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k22(), output);
  }

  // required float k23 = 6;
  if (has_k23()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->k23(), output);
  }

  // required float k31 = 7;
  if (has_k31()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->k31(), output);
  }

  // required float k32 = 8;
  if (has_k32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->k32(), output);
  }

  // required float k33 = 9;
  if (has_k33()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->k33(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraInternalParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float k11 = 1;
  if (has_k11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->k11(), target);
  }

  // required float k12 = 2;
  if (has_k12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->k12(), target);
  }

  // required float k13 = 3;
  if (has_k13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->k13(), target);
  }

  // required float k21 = 4;
  if (has_k21()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->k21(), target);
  }

  // required float k22 = 5;
  if (has_k22()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k22(), target);
  }

  // required float k23 = 6;
  if (has_k23()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->k23(), target);
  }

  // required float k31 = 7;
  if (has_k31()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->k31(), target);
  }

  // required float k32 = 8;
  if (has_k32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->k32(), target);
  }

  // required float k33 = 9;
  if (has_k33()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->k33(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraInternalParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float k11 = 1;
    if (has_k11()) {
      total_size += 1 + 4;
    }

    // required float k12 = 2;
    if (has_k12()) {
      total_size += 1 + 4;
    }

    // required float k13 = 3;
    if (has_k13()) {
      total_size += 1 + 4;
    }

    // required float k21 = 4;
    if (has_k21()) {
      total_size += 1 + 4;
    }

    // required float k22 = 5;
    if (has_k22()) {
      total_size += 1 + 4;
    }

    // required float k23 = 6;
    if (has_k23()) {
      total_size += 1 + 4;
    }

    // required float k31 = 7;
    if (has_k31()) {
      total_size += 1 + 4;
    }

    // required float k32 = 8;
    if (has_k32()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float k33 = 9;
    if (has_k33()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraInternalParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraInternalParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraInternalParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraInternalParameters::MergeFrom(const CameraInternalParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k11()) {
      set_k11(from.k11());
    }
    if (from.has_k12()) {
      set_k12(from.k12());
    }
    if (from.has_k13()) {
      set_k13(from.k13());
    }
    if (from.has_k21()) {
      set_k21(from.k21());
    }
    if (from.has_k22()) {
      set_k22(from.k22());
    }
    if (from.has_k23()) {
      set_k23(from.k23());
    }
    if (from.has_k31()) {
      set_k31(from.k31());
    }
    if (from.has_k32()) {
      set_k32(from.k32());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_k33()) {
      set_k33(from.k33());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraInternalParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInternalParameters::CopyFrom(const CameraInternalParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInternalParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CameraInternalParameters::Swap(CameraInternalParameters* other) {
  if (other != this) {
    std::swap(k11_, other->k11_);
    std::swap(k12_, other->k12_);
    std::swap(k13_, other->k13_);
    std::swap(k21_, other->k21_);
    std::swap(k22_, other->k22_);
    std::swap(k23_, other->k23_);
    std::swap(k31_, other->k31_);
    std::swap(k32_, other->k32_);
    std::swap(k33_, other->k33_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraInternalParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraInternalParameters_descriptor_;
  metadata.reflection = CameraInternalParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadialDistortion::kK1FieldNumber;
const int RadialDistortion::kK2FieldNumber;
const int RadialDistortion::kK3FieldNumber;
#endif  // !_MSC_VER

RadialDistortion::RadialDistortion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RadialDistortion::InitAsDefaultInstance() {
}

RadialDistortion::RadialDistortion(const RadialDistortion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RadialDistortion::SharedCtor() {
  _cached_size_ = 0;
  k1_ = 0;
  k2_ = 0;
  k3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadialDistortion::~RadialDistortion() {
  SharedDtor();
}

void RadialDistortion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadialDistortion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadialDistortion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadialDistortion_descriptor_;
}

const RadialDistortion& RadialDistortion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calibration_2eproto();
  return *default_instance_;
}

RadialDistortion* RadialDistortion::default_instance_ = NULL;

RadialDistortion* RadialDistortion::New() const {
  return new RadialDistortion;
}

void RadialDistortion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    k1_ = 0;
    k2_ = 0;
    k3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadialDistortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float k1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k1_)));
          set_has_k1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_k2;
        break;
      }

      // optional float k2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k2_)));
          set_has_k2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_k3;
        break;
      }

      // optional float k3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k3_)));
          set_has_k3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RadialDistortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float k1 = 1;
  if (has_k1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->k1(), output);
  }

  // optional float k2 = 2;
  if (has_k2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->k2(), output);
  }

  // optional float k3 = 3;
  if (has_k3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->k3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RadialDistortion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float k1 = 1;
  if (has_k1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->k1(), target);
  }

  // optional float k2 = 2;
  if (has_k2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->k2(), target);
  }

  // optional float k3 = 3;
  if (has_k3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->k3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RadialDistortion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float k1 = 1;
    if (has_k1()) {
      total_size += 1 + 4;
    }

    // optional float k2 = 2;
    if (has_k2()) {
      total_size += 1 + 4;
    }

    // optional float k3 = 3;
    if (has_k3()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadialDistortion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadialDistortion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadialDistortion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadialDistortion::MergeFrom(const RadialDistortion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k1()) {
      set_k1(from.k1());
    }
    if (from.has_k2()) {
      set_k2(from.k2());
    }
    if (from.has_k3()) {
      set_k3(from.k3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadialDistortion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadialDistortion::CopyFrom(const RadialDistortion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadialDistortion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RadialDistortion::Swap(RadialDistortion* other) {
  if (other != this) {
    std::swap(k1_, other->k1_);
    std::swap(k2_, other->k2_);
    std::swap(k3_, other->k3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadialDistortion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadialDistortion_descriptor_;
  metadata.reflection = RadialDistortion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TangentialDistortion::kK1FieldNumber;
const int TangentialDistortion::kK2FieldNumber;
const int TangentialDistortion::kK3FieldNumber;
#endif  // !_MSC_VER

TangentialDistortion::TangentialDistortion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TangentialDistortion::InitAsDefaultInstance() {
}

TangentialDistortion::TangentialDistortion(const TangentialDistortion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TangentialDistortion::SharedCtor() {
  _cached_size_ = 0;
  k1_ = 0;
  k2_ = 0;
  k3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TangentialDistortion::~TangentialDistortion() {
  SharedDtor();
}

void TangentialDistortion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TangentialDistortion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TangentialDistortion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TangentialDistortion_descriptor_;
}

const TangentialDistortion& TangentialDistortion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calibration_2eproto();
  return *default_instance_;
}

TangentialDistortion* TangentialDistortion::default_instance_ = NULL;

TangentialDistortion* TangentialDistortion::New() const {
  return new TangentialDistortion;
}

void TangentialDistortion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    k1_ = 0;
    k2_ = 0;
    k3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TangentialDistortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float k1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k1_)));
          set_has_k1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_k2;
        break;
      }

      // required float k2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k2_)));
          set_has_k2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_k3;
        break;
      }

      // optional float k3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k3_)));
          set_has_k3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TangentialDistortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float k1 = 1;
  if (has_k1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->k1(), output);
  }

  // required float k2 = 2;
  if (has_k2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->k2(), output);
  }

  // optional float k3 = 3;
  if (has_k3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->k3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TangentialDistortion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float k1 = 1;
  if (has_k1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->k1(), target);
  }

  // required float k2 = 2;
  if (has_k2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->k2(), target);
  }

  // optional float k3 = 3;
  if (has_k3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->k3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TangentialDistortion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float k1 = 1;
    if (has_k1()) {
      total_size += 1 + 4;
    }

    // required float k2 = 2;
    if (has_k2()) {
      total_size += 1 + 4;
    }

    // optional float k3 = 3;
    if (has_k3()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TangentialDistortion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TangentialDistortion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TangentialDistortion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TangentialDistortion::MergeFrom(const TangentialDistortion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k1()) {
      set_k1(from.k1());
    }
    if (from.has_k2()) {
      set_k2(from.k2());
    }
    if (from.has_k3()) {
      set_k3(from.k3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TangentialDistortion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TangentialDistortion::CopyFrom(const TangentialDistortion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TangentialDistortion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TangentialDistortion::Swap(TangentialDistortion* other) {
  if (other != this) {
    std::swap(k1_, other->k1_);
    std::swap(k2_, other->k2_);
    std::swap(k3_, other->k3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TangentialDistortion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TangentialDistortion_descriptor_;
  metadata.reflection = TangentialDistortion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotationMatrix::kR11FieldNumber;
const int RotationMatrix::kR12FieldNumber;
const int RotationMatrix::kR13FieldNumber;
const int RotationMatrix::kR21FieldNumber;
const int RotationMatrix::kR22FieldNumber;
const int RotationMatrix::kR23FieldNumber;
const int RotationMatrix::kR31FieldNumber;
const int RotationMatrix::kR32FieldNumber;
const int RotationMatrix::kR33FieldNumber;
#endif  // !_MSC_VER

RotationMatrix::RotationMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotationMatrix::InitAsDefaultInstance() {
}

RotationMatrix::RotationMatrix(const RotationMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotationMatrix::SharedCtor() {
  _cached_size_ = 0;
  r11_ = 0;
  r12_ = 0;
  r13_ = 0;
  r21_ = 0;
  r22_ = 0;
  r23_ = 0;
  r31_ = 0;
  r32_ = 0;
  r33_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotationMatrix::~RotationMatrix() {
  SharedDtor();
}

void RotationMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotationMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotationMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotationMatrix_descriptor_;
}

const RotationMatrix& RotationMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calibration_2eproto();
  return *default_instance_;
}

RotationMatrix* RotationMatrix::default_instance_ = NULL;

RotationMatrix* RotationMatrix::New() const {
  return new RotationMatrix;
}

void RotationMatrix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r11_ = 0;
    r12_ = 0;
    r13_ = 0;
    r21_ = 0;
    r22_ = 0;
    r23_ = 0;
    r31_ = 0;
    r32_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    r33_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotationMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float r11 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r11_)));
          set_has_r11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_r12;
        break;
      }

      // required float r12 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r12_)));
          set_has_r12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_r13;
        break;
      }

      // required float r13 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r13_)));
          set_has_r13();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_r21;
        break;
      }

      // required float r21 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r21_)));
          set_has_r21();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_r22;
        break;
      }

      // required float r22 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r22:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r22_)));
          set_has_r22();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_r23;
        break;
      }

      // required float r23 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r23_)));
          set_has_r23();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_r31;
        break;
      }

      // required float r31 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r31:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r31_)));
          set_has_r31();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_r32;
        break;
      }

      // required float r32 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r32_)));
          set_has_r32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_r33;
        break;
      }

      // required float r33 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r33:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r33_)));
          set_has_r33();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotationMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float r11 = 1;
  if (has_r11()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r11(), output);
  }

  // required float r12 = 2;
  if (has_r12()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->r12(), output);
  }

  // required float r13 = 3;
  if (has_r13()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->r13(), output);
  }

  // required float r21 = 4;
  if (has_r21()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->r21(), output);
  }

  // required float r22 = 5;
  if (has_r22()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->r22(), output);
  }

  // required float r23 = 6;
  if (has_r23()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->r23(), output);
  }

  // required float r31 = 7;
  if (has_r31()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->r31(), output);
  }

  // required float r32 = 8;
  if (has_r32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->r32(), output);
  }

  // required float r33 = 9;
  if (has_r33()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->r33(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotationMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float r11 = 1;
  if (has_r11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r11(), target);
  }

  // required float r12 = 2;
  if (has_r12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->r12(), target);
  }

  // required float r13 = 3;
  if (has_r13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->r13(), target);
  }

  // required float r21 = 4;
  if (has_r21()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->r21(), target);
  }

  // required float r22 = 5;
  if (has_r22()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->r22(), target);
  }

  // required float r23 = 6;
  if (has_r23()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->r23(), target);
  }

  // required float r31 = 7;
  if (has_r31()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->r31(), target);
  }

  // required float r32 = 8;
  if (has_r32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->r32(), target);
  }

  // required float r33 = 9;
  if (has_r33()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->r33(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotationMatrix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float r11 = 1;
    if (has_r11()) {
      total_size += 1 + 4;
    }

    // required float r12 = 2;
    if (has_r12()) {
      total_size += 1 + 4;
    }

    // required float r13 = 3;
    if (has_r13()) {
      total_size += 1 + 4;
    }

    // required float r21 = 4;
    if (has_r21()) {
      total_size += 1 + 4;
    }

    // required float r22 = 5;
    if (has_r22()) {
      total_size += 1 + 4;
    }

    // required float r23 = 6;
    if (has_r23()) {
      total_size += 1 + 4;
    }

    // required float r31 = 7;
    if (has_r31()) {
      total_size += 1 + 4;
    }

    // required float r32 = 8;
    if (has_r32()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float r33 = 9;
    if (has_r33()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotationMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotationMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotationMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotationMatrix::MergeFrom(const RotationMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r11()) {
      set_r11(from.r11());
    }
    if (from.has_r12()) {
      set_r12(from.r12());
    }
    if (from.has_r13()) {
      set_r13(from.r13());
    }
    if (from.has_r21()) {
      set_r21(from.r21());
    }
    if (from.has_r22()) {
      set_r22(from.r22());
    }
    if (from.has_r23()) {
      set_r23(from.r23());
    }
    if (from.has_r31()) {
      set_r31(from.r31());
    }
    if (from.has_r32()) {
      set_r32(from.r32());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_r33()) {
      set_r33(from.r33());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotationMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationMatrix::CopyFrom(const RotationMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationMatrix::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void RotationMatrix::Swap(RotationMatrix* other) {
  if (other != this) {
    std::swap(r11_, other->r11_);
    std::swap(r12_, other->r12_);
    std::swap(r13_, other->r13_);
    std::swap(r21_, other->r21_);
    std::swap(r22_, other->r22_);
    std::swap(r23_, other->r23_);
    std::swap(r31_, other->r31_);
    std::swap(r32_, other->r32_);
    std::swap(r33_, other->r33_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotationMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotationMatrix_descriptor_;
  metadata.reflection = RotationMatrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TranslationVector::kT1FieldNumber;
const int TranslationVector::kT2FieldNumber;
const int TranslationVector::kT3FieldNumber;
#endif  // !_MSC_VER

TranslationVector::TranslationVector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TranslationVector::InitAsDefaultInstance() {
}

TranslationVector::TranslationVector(const TranslationVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TranslationVector::SharedCtor() {
  _cached_size_ = 0;
  t1_ = 0;
  t2_ = 0;
  t3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranslationVector::~TranslationVector() {
  SharedDtor();
}

void TranslationVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TranslationVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranslationVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranslationVector_descriptor_;
}

const TranslationVector& TranslationVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calibration_2eproto();
  return *default_instance_;
}

TranslationVector* TranslationVector::default_instance_ = NULL;

TranslationVector* TranslationVector::New() const {
  return new TranslationVector;
}

void TranslationVector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t1_ = 0;
    t2_ = 0;
    t3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TranslationVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float t1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t1_)));
          set_has_t1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_t2;
        break;
      }

      // required float t2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_t2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t2_)));
          set_has_t2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_t3;
        break;
      }

      // required float t3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_t3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t3_)));
          set_has_t3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranslationVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float t1 = 1;
  if (has_t1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->t1(), output);
  }

  // required float t2 = 2;
  if (has_t2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->t2(), output);
  }

  // required float t3 = 3;
  if (has_t3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->t3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TranslationVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float t1 = 1;
  if (has_t1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->t1(), target);
  }

  // required float t2 = 2;
  if (has_t2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->t2(), target);
  }

  // required float t3 = 3;
  if (has_t3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->t3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TranslationVector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float t1 = 1;
    if (has_t1()) {
      total_size += 1 + 4;
    }

    // required float t2 = 2;
    if (has_t2()) {
      total_size += 1 + 4;
    }

    // required float t3 = 3;
    if (has_t3()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranslationVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TranslationVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TranslationVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TranslationVector::MergeFrom(const TranslationVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t1()) {
      set_t1(from.t1());
    }
    if (from.has_t2()) {
      set_t2(from.t2());
    }
    if (from.has_t3()) {
      set_t3(from.t3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TranslationVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslationVector::CopyFrom(const TranslationVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslationVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TranslationVector::Swap(TranslationVector* other) {
  if (other != this) {
    std::swap(t1_, other->t1_);
    std::swap(t2_, other->t2_);
    std::swap(t3_, other->t3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TranslationVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranslationVector_descriptor_;
  metadata.reflection = TranslationVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pose::kRotationFieldNumber;
const int Pose::kTranslationFieldNumber;
#endif  // !_MSC_VER

Pose::Pose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pose::InitAsDefaultInstance() {
  rotation_ = const_cast< ::doppia_protobuf::RotationMatrix*>(&::doppia_protobuf::RotationMatrix::default_instance());
  translation_ = const_cast< ::doppia_protobuf::TranslationVector*>(&::doppia_protobuf::TranslationVector::default_instance());
}

Pose::Pose(const Pose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pose::SharedCtor() {
  _cached_size_ = 0;
  rotation_ = NULL;
  translation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pose::~Pose() {
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != default_instance_) {
    delete rotation_;
    delete translation_;
  }
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose_descriptor_;
}

const Pose& Pose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calibration_2eproto();
  return *default_instance_;
}

Pose* Pose::default_instance_ = NULL;

Pose* Pose::New() const {
  return new Pose;
}

void Pose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::doppia_protobuf::RotationMatrix::Clear();
    }
    if (has_translation()) {
      if (translation_ != NULL) translation_->::doppia_protobuf::TranslationVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .doppia_protobuf.RotationMatrix rotation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_translation;
        break;
      }

      // required .doppia_protobuf.TranslationVector translation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_translation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .doppia_protobuf.RotationMatrix rotation = 1;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rotation(), output);
  }

  // required .doppia_protobuf.TranslationVector translation = 2;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->translation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .doppia_protobuf.RotationMatrix rotation = 1;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rotation(), target);
  }

  // required .doppia_protobuf.TranslationVector translation = 2;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->translation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .doppia_protobuf.RotationMatrix rotation = 1;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // required .doppia_protobuf.TranslationVector translation = 2;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rotation()) {
      mutable_rotation()->::doppia_protobuf::RotationMatrix::MergeFrom(from.rotation());
    }
    if (from.has_translation()) {
      mutable_translation()->::doppia_protobuf::TranslationVector::MergeFrom(from.translation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  if (has_translation()) {
    if (!this->translation().IsInitialized()) return false;
  }
  return true;
}

void Pose::Swap(Pose* other) {
  if (other != this) {
    std::swap(rotation_, other->rotation_);
    std::swap(translation_, other->translation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose_descriptor_;
  metadata.reflection = Pose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraCalibration::kNameFieldNumber;
const int CameraCalibration::kInternalParametersFieldNumber;
const int CameraCalibration::kRadialDistortionFieldNumber;
const int CameraCalibration::kTangentialDistortionFieldNumber;
const int CameraCalibration::kPoseFieldNumber;
#endif  // !_MSC_VER

CameraCalibration::CameraCalibration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraCalibration::InitAsDefaultInstance() {
  internal_parameters_ = const_cast< ::doppia_protobuf::CameraInternalParameters*>(&::doppia_protobuf::CameraInternalParameters::default_instance());
  radial_distortion_ = const_cast< ::doppia_protobuf::RadialDistortion*>(&::doppia_protobuf::RadialDistortion::default_instance());
  tangential_distortion_ = const_cast< ::doppia_protobuf::TangentialDistortion*>(&::doppia_protobuf::TangentialDistortion::default_instance());
  pose_ = const_cast< ::doppia_protobuf::Pose*>(&::doppia_protobuf::Pose::default_instance());
}

CameraCalibration::CameraCalibration(const CameraCalibration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraCalibration::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  internal_parameters_ = NULL;
  radial_distortion_ = NULL;
  tangential_distortion_ = NULL;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraCalibration::~CameraCalibration() {
  SharedDtor();
}

void CameraCalibration::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete internal_parameters_;
    delete radial_distortion_;
    delete tangential_distortion_;
    delete pose_;
  }
}

void CameraCalibration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraCalibration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraCalibration_descriptor_;
}

const CameraCalibration& CameraCalibration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calibration_2eproto();
  return *default_instance_;
}

CameraCalibration* CameraCalibration::default_instance_ = NULL;

CameraCalibration* CameraCalibration::New() const {
  return new CameraCalibration;
}

void CameraCalibration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_internal_parameters()) {
      if (internal_parameters_ != NULL) internal_parameters_->::doppia_protobuf::CameraInternalParameters::Clear();
    }
    if (has_radial_distortion()) {
      if (radial_distortion_ != NULL) radial_distortion_->::doppia_protobuf::RadialDistortion::Clear();
    }
    if (has_tangential_distortion()) {
      if (tangential_distortion_ != NULL) tangential_distortion_->::doppia_protobuf::TangentialDistortion::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::doppia_protobuf::Pose::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_internal_parameters;
        break;
      }

      // required .doppia_protobuf.CameraInternalParameters internal_parameters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_radial_distortion;
        break;
      }

      // optional .doppia_protobuf.RadialDistortion radial_distortion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radial_distortion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radial_distortion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tangential_distortion;
        break;
      }

      // optional .doppia_protobuf.TangentialDistortion tangential_distortion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tangential_distortion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tangential_distortion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }

      // optional .doppia_protobuf.Pose pose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .doppia_protobuf.CameraInternalParameters internal_parameters = 2;
  if (has_internal_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->internal_parameters(), output);
  }

  // optional .doppia_protobuf.RadialDistortion radial_distortion = 3;
  if (has_radial_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->radial_distortion(), output);
  }

  // optional .doppia_protobuf.TangentialDistortion tangential_distortion = 4;
  if (has_tangential_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tangential_distortion(), output);
  }

  // optional .doppia_protobuf.Pose pose = 5;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraCalibration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .doppia_protobuf.CameraInternalParameters internal_parameters = 2;
  if (has_internal_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->internal_parameters(), target);
  }

  // optional .doppia_protobuf.RadialDistortion radial_distortion = 3;
  if (has_radial_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->radial_distortion(), target);
  }

  // optional .doppia_protobuf.TangentialDistortion tangential_distortion = 4;
  if (has_tangential_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tangential_distortion(), target);
  }

  // optional .doppia_protobuf.Pose pose = 5;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraCalibration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .doppia_protobuf.CameraInternalParameters internal_parameters = 2;
    if (has_internal_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_parameters());
    }

    // optional .doppia_protobuf.RadialDistortion radial_distortion = 3;
    if (has_radial_distortion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radial_distortion());
    }

    // optional .doppia_protobuf.TangentialDistortion tangential_distortion = 4;
    if (has_tangential_distortion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tangential_distortion());
    }

    // optional .doppia_protobuf.Pose pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraCalibration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraCalibration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraCalibration::MergeFrom(const CameraCalibration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_internal_parameters()) {
      mutable_internal_parameters()->::doppia_protobuf::CameraInternalParameters::MergeFrom(from.internal_parameters());
    }
    if (from.has_radial_distortion()) {
      mutable_radial_distortion()->::doppia_protobuf::RadialDistortion::MergeFrom(from.radial_distortion());
    }
    if (from.has_tangential_distortion()) {
      mutable_tangential_distortion()->::doppia_protobuf::TangentialDistortion::MergeFrom(from.tangential_distortion());
    }
    if (from.has_pose()) {
      mutable_pose()->::doppia_protobuf::Pose::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibration::CopyFrom(const CameraCalibration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_internal_parameters()) {
    if (!this->internal_parameters().IsInitialized()) return false;
  }
  if (has_radial_distortion()) {
    if (!this->radial_distortion().IsInitialized()) return false;
  }
  if (has_tangential_distortion()) {
    if (!this->tangential_distortion().IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void CameraCalibration::Swap(CameraCalibration* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(internal_parameters_, other->internal_parameters_);
    std::swap(radial_distortion_, other->radial_distortion_);
    std::swap(tangential_distortion_, other->tangential_distortion_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraCalibration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraCalibration_descriptor_;
  metadata.reflection = CameraCalibration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StereoCameraCalibration::kNameFieldNumber;
const int StereoCameraCalibration::kLeftCameraFieldNumber;
const int StereoCameraCalibration::kRightCameraFieldNumber;
#endif  // !_MSC_VER

StereoCameraCalibration::StereoCameraCalibration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StereoCameraCalibration::InitAsDefaultInstance() {
  left_camera_ = const_cast< ::doppia_protobuf::CameraCalibration*>(&::doppia_protobuf::CameraCalibration::default_instance());
  right_camera_ = const_cast< ::doppia_protobuf::CameraCalibration*>(&::doppia_protobuf::CameraCalibration::default_instance());
}

StereoCameraCalibration::StereoCameraCalibration(const StereoCameraCalibration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StereoCameraCalibration::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  left_camera_ = NULL;
  right_camera_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StereoCameraCalibration::~StereoCameraCalibration() {
  SharedDtor();
}

void StereoCameraCalibration::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete left_camera_;
    delete right_camera_;
  }
}

void StereoCameraCalibration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StereoCameraCalibration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StereoCameraCalibration_descriptor_;
}

const StereoCameraCalibration& StereoCameraCalibration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calibration_2eproto();
  return *default_instance_;
}

StereoCameraCalibration* StereoCameraCalibration::default_instance_ = NULL;

StereoCameraCalibration* StereoCameraCalibration::New() const {
  return new StereoCameraCalibration;
}

void StereoCameraCalibration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_left_camera()) {
      if (left_camera_ != NULL) left_camera_->::doppia_protobuf::CameraCalibration::Clear();
    }
    if (has_right_camera()) {
      if (right_camera_ != NULL) right_camera_->::doppia_protobuf::CameraCalibration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StereoCameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_left_camera;
        break;
      }

      // required .doppia_protobuf.CameraCalibration left_camera = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_camera()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_right_camera;
        break;
      }

      // required .doppia_protobuf.CameraCalibration right_camera = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_camera()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StereoCameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .doppia_protobuf.CameraCalibration left_camera = 2;
  if (has_left_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->left_camera(), output);
  }

  // required .doppia_protobuf.CameraCalibration right_camera = 3;
  if (has_right_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right_camera(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StereoCameraCalibration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .doppia_protobuf.CameraCalibration left_camera = 2;
  if (has_left_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->left_camera(), target);
  }

  // required .doppia_protobuf.CameraCalibration right_camera = 3;
  if (has_right_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->right_camera(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StereoCameraCalibration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .doppia_protobuf.CameraCalibration left_camera = 2;
    if (has_left_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_camera());
    }

    // required .doppia_protobuf.CameraCalibration right_camera = 3;
    if (has_right_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_camera());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StereoCameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StereoCameraCalibration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StereoCameraCalibration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StereoCameraCalibration::MergeFrom(const StereoCameraCalibration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_left_camera()) {
      mutable_left_camera()->::doppia_protobuf::CameraCalibration::MergeFrom(from.left_camera());
    }
    if (from.has_right_camera()) {
      mutable_right_camera()->::doppia_protobuf::CameraCalibration::MergeFrom(from.right_camera());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StereoCameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StereoCameraCalibration::CopyFrom(const StereoCameraCalibration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StereoCameraCalibration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_left_camera()) {
    if (!this->left_camera().IsInitialized()) return false;
  }
  if (has_right_camera()) {
    if (!this->right_camera().IsInitialized()) return false;
  }
  return true;
}

void StereoCameraCalibration::Swap(StereoCameraCalibration* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(left_camera_, other->left_camera_);
    std::swap(right_camera_, other->right_camera_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StereoCameraCalibration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StereoCameraCalibration_descriptor_;
  metadata.reflection = StereoCameraCalibration_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace doppia_protobuf

// @@protoc_insertion_point(global_scope)
