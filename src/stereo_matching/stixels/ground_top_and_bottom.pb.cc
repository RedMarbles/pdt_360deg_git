// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ground_top_and_bottom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ground_top_and_bottom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace doppia_protobuf {

namespace {

const ::google::protobuf::Descriptor* TopAndBottom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopAndBottom_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroundTopAndBottom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroundTopAndBottom_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ground_5ftop_5fand_5fbottom_2eproto() {
  protobuf_AddDesc_ground_5ftop_5fand_5fbottom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ground_top_and_bottom.proto");
  GOOGLE_CHECK(file != NULL);
  TopAndBottom_descriptor_ = file->message_type(0);
  static const int TopAndBottom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopAndBottom, top_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopAndBottom, bottom_y_),
  };
  TopAndBottom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopAndBottom_descriptor_,
      TopAndBottom::default_instance_,
      TopAndBottom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopAndBottom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopAndBottom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopAndBottom));
  GroundTopAndBottom_descriptor_ = file->message_type(1);
  static const int GroundTopAndBottom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTopAndBottom, top_and_bottom_),
  };
  GroundTopAndBottom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroundTopAndBottom_descriptor_,
      GroundTopAndBottom::default_instance_,
      GroundTopAndBottom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTopAndBottom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTopAndBottom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroundTopAndBottom));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ground_5ftop_5fand_5fbottom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopAndBottom_descriptor_, &TopAndBottom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroundTopAndBottom_descriptor_, &GroundTopAndBottom::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ground_5ftop_5fand_5fbottom_2eproto() {
  delete TopAndBottom::default_instance_;
  delete TopAndBottom_reflection_;
  delete GroundTopAndBottom::default_instance_;
  delete GroundTopAndBottom_reflection_;
}

void protobuf_AddDesc_ground_5ftop_5fand_5fbottom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033ground_top_and_bottom.proto\022\017doppia_pr"
    "otobuf\"/\n\014TopAndBottom\022\r\n\005top_y\030\001 \002(\r\022\020\n"
    "\010bottom_y\030\002 \002(\r\"K\n\022GroundTopAndBottom\0225\n"
    "\016top_and_bottom\030\001 \003(\0132\035.doppia_protobuf."
    "TopAndBottom", 172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ground_top_and_bottom.proto", &protobuf_RegisterTypes);
  TopAndBottom::default_instance_ = new TopAndBottom();
  GroundTopAndBottom::default_instance_ = new GroundTopAndBottom();
  TopAndBottom::default_instance_->InitAsDefaultInstance();
  GroundTopAndBottom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ground_5ftop_5fand_5fbottom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ground_5ftop_5fand_5fbottom_2eproto {
  StaticDescriptorInitializer_ground_5ftop_5fand_5fbottom_2eproto() {
    protobuf_AddDesc_ground_5ftop_5fand_5fbottom_2eproto();
  }
} static_descriptor_initializer_ground_5ftop_5fand_5fbottom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TopAndBottom::kTopYFieldNumber;
const int TopAndBottom::kBottomYFieldNumber;
#endif  // !_MSC_VER

TopAndBottom::TopAndBottom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopAndBottom::InitAsDefaultInstance() {
}

TopAndBottom::TopAndBottom(const TopAndBottom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopAndBottom::SharedCtor() {
  _cached_size_ = 0;
  top_y_ = 0u;
  bottom_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopAndBottom::~TopAndBottom() {
  SharedDtor();
}

void TopAndBottom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopAndBottom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopAndBottom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopAndBottom_descriptor_;
}

const TopAndBottom& TopAndBottom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ground_5ftop_5fand_5fbottom_2eproto();
  return *default_instance_;
}

TopAndBottom* TopAndBottom::default_instance_ = NULL;

TopAndBottom* TopAndBottom::New() const {
  return new TopAndBottom;
}

void TopAndBottom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    top_y_ = 0u;
    bottom_y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopAndBottom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 top_y = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_y_)));
          set_has_top_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bottom_y;
        break;
      }

      // required uint32 bottom_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_y_)));
          set_has_bottom_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopAndBottom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 top_y = 1;
  if (has_top_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_y(), output);
  }

  // required uint32 bottom_y = 2;
  if (has_bottom_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bottom_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopAndBottom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 top_y = 1;
  if (has_top_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_y(), target);
  }

  // required uint32 bottom_y = 2;
  if (has_bottom_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bottom_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopAndBottom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 top_y = 1;
    if (has_top_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_y());
    }

    // required uint32 bottom_y = 2;
    if (has_bottom_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopAndBottom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopAndBottom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopAndBottom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopAndBottom::MergeFrom(const TopAndBottom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_y()) {
      set_top_y(from.top_y());
    }
    if (from.has_bottom_y()) {
      set_bottom_y(from.bottom_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopAndBottom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopAndBottom::CopyFrom(const TopAndBottom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopAndBottom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TopAndBottom::Swap(TopAndBottom* other) {
  if (other != this) {
    std::swap(top_y_, other->top_y_);
    std::swap(bottom_y_, other->bottom_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopAndBottom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopAndBottom_descriptor_;
  metadata.reflection = TopAndBottom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroundTopAndBottom::kTopAndBottomFieldNumber;
#endif  // !_MSC_VER

GroundTopAndBottom::GroundTopAndBottom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroundTopAndBottom::InitAsDefaultInstance() {
}

GroundTopAndBottom::GroundTopAndBottom(const GroundTopAndBottom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroundTopAndBottom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroundTopAndBottom::~GroundTopAndBottom() {
  SharedDtor();
}

void GroundTopAndBottom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroundTopAndBottom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroundTopAndBottom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroundTopAndBottom_descriptor_;
}

const GroundTopAndBottom& GroundTopAndBottom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ground_5ftop_5fand_5fbottom_2eproto();
  return *default_instance_;
}

GroundTopAndBottom* GroundTopAndBottom::default_instance_ = NULL;

GroundTopAndBottom* GroundTopAndBottom::New() const {
  return new GroundTopAndBottom;
}

void GroundTopAndBottom::Clear() {
  top_and_bottom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroundTopAndBottom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .doppia_protobuf.TopAndBottom top_and_bottom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top_and_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_top_and_bottom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_top_and_bottom;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroundTopAndBottom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .doppia_protobuf.TopAndBottom top_and_bottom = 1;
  for (int i = 0; i < this->top_and_bottom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->top_and_bottom(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroundTopAndBottom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .doppia_protobuf.TopAndBottom top_and_bottom = 1;
  for (int i = 0; i < this->top_and_bottom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->top_and_bottom(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroundTopAndBottom::ByteSize() const {
  int total_size = 0;

  // repeated .doppia_protobuf.TopAndBottom top_and_bottom = 1;
  total_size += 1 * this->top_and_bottom_size();
  for (int i = 0; i < this->top_and_bottom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->top_and_bottom(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroundTopAndBottom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroundTopAndBottom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroundTopAndBottom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroundTopAndBottom::MergeFrom(const GroundTopAndBottom& from) {
  GOOGLE_CHECK_NE(&from, this);
  top_and_bottom_.MergeFrom(from.top_and_bottom_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroundTopAndBottom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTopAndBottom::CopyFrom(const GroundTopAndBottom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTopAndBottom::IsInitialized() const {

  for (int i = 0; i < top_and_bottom_size(); i++) {
    if (!this->top_and_bottom(i).IsInitialized()) return false;
  }
  return true;
}

void GroundTopAndBottom::Swap(GroundTopAndBottom* other) {
  if (other != this) {
    top_and_bottom_.Swap(&other->top_and_bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroundTopAndBottom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroundTopAndBottom_descriptor_;
  metadata.reflection = GroundTopAndBottom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace doppia_protobuf

// @@protoc_insertion_point(global_scope)
