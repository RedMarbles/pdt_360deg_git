// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plane3d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plane3d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace doppia_protobuf {

namespace {

const ::google::protobuf::Descriptor* Plane3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plane3d_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_plane3d_2eproto() {
  protobuf_AddDesc_plane3d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plane3d.proto");
  GOOGLE_CHECK(file != NULL);
  Plane3d_descriptor_ = file->message_type(0);
  static const int Plane3d_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane3d, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane3d, normal_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane3d, normal_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane3d, normal_z_),
  };
  Plane3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plane3d_descriptor_,
      Plane3d::default_instance_,
      Plane3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plane3d));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plane3d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plane3d_descriptor_, &Plane3d::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plane3d_2eproto() {
  delete Plane3d::default_instance_;
  delete Plane3d_reflection_;
}

void protobuf_AddDesc_plane3d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rplane3d.proto\022\017doppia_protobuf\"O\n\007Plan"
    "e3d\022\016\n\006offset\030\001 \002(\002\022\020\n\010normal_x\030\002 \002(\002\022\020\n"
    "\010normal_y\030\003 \002(\002\022\020\n\010normal_z\030\004 \002(\002", 113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plane3d.proto", &protobuf_RegisterTypes);
  Plane3d::default_instance_ = new Plane3d();
  Plane3d::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plane3d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plane3d_2eproto {
  StaticDescriptorInitializer_plane3d_2eproto() {
    protobuf_AddDesc_plane3d_2eproto();
  }
} static_descriptor_initializer_plane3d_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Plane3d::kOffsetFieldNumber;
const int Plane3d::kNormalXFieldNumber;
const int Plane3d::kNormalYFieldNumber;
const int Plane3d::kNormalZFieldNumber;
#endif  // !_MSC_VER

Plane3d::Plane3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plane3d::InitAsDefaultInstance() {
}

Plane3d::Plane3d(const Plane3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plane3d::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  normal_x_ = 0;
  normal_y_ = 0;
  normal_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plane3d::~Plane3d() {
  SharedDtor();
}

void Plane3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plane3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plane3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plane3d_descriptor_;
}

const Plane3d& Plane3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plane3d_2eproto();
  return *default_instance_;
}

Plane3d* Plane3d::default_instance_ = NULL;

Plane3d* Plane3d::New() const {
  return new Plane3d;
}

void Plane3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    normal_x_ = 0;
    normal_y_ = 0;
    normal_z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plane3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_normal_x;
        break;
      }

      // required float normal_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normal_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normal_x_)));
          set_has_normal_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_normal_y;
        break;
      }

      // required float normal_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normal_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normal_y_)));
          set_has_normal_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_normal_z;
        break;
      }

      // required float normal_z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normal_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normal_z_)));
          set_has_normal_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plane3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset(), output);
  }

  // required float normal_x = 2;
  if (has_normal_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->normal_x(), output);
  }

  // required float normal_y = 3;
  if (has_normal_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->normal_y(), output);
  }

  // required float normal_z = 4;
  if (has_normal_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->normal_z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plane3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->offset(), target);
  }

  // required float normal_x = 2;
  if (has_normal_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->normal_x(), target);
  }

  // required float normal_y = 3;
  if (has_normal_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->normal_y(), target);
  }

  // required float normal_z = 4;
  if (has_normal_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->normal_z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plane3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float offset = 1;
    if (has_offset()) {
      total_size += 1 + 4;
    }

    // required float normal_x = 2;
    if (has_normal_x()) {
      total_size += 1 + 4;
    }

    // required float normal_y = 3;
    if (has_normal_y()) {
      total_size += 1 + 4;
    }

    // required float normal_z = 4;
    if (has_normal_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plane3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plane3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plane3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plane3d::MergeFrom(const Plane3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_normal_x()) {
      set_normal_x(from.normal_x());
    }
    if (from.has_normal_y()) {
      set_normal_y(from.normal_y());
    }
    if (from.has_normal_z()) {
      set_normal_z(from.normal_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plane3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plane3d::CopyFrom(const Plane3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plane3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Plane3d::Swap(Plane3d* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(normal_x_, other->normal_x_);
    std::swap(normal_y_, other->normal_y_);
    std::swap(normal_z_, other->normal_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plane3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plane3d_descriptor_;
  metadata.reflection = Plane3d_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace doppia_protobuf

// @@protoc_insertion_point(global_scope)
