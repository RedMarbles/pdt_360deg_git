// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detections.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "detections.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace doppia_protobuf {

namespace {

const ::google::protobuf::Descriptor* Point2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Box_reflection_ = NULL;
const ::google::protobuf::Descriptor* Detection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Detection_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Detection_ObjectClasses_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Detections_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Detections_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_detections_2eproto() {
  protobuf_AddDesc_detections_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "detections.proto");
  GOOGLE_CHECK(file != NULL);
  Point2d_descriptor_ = file->message_type(0);
  static const int Point2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2d, y_),
  };
  Point2d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point2d_descriptor_,
      Point2d::default_instance_,
      Point2d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point2d));
  Box_descriptor_ = file->message_type(1);
  static const int Box_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, min_corner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, max_corner_),
  };
  Box_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Box_descriptor_,
      Box::default_instance_,
      Box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Box));
  Detection_descriptor_ = file->message_type(2);
  static const int Detection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, bounding_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, object_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, score_),
  };
  Detection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Detection_descriptor_,
      Detection::default_instance_,
      Detection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Detection));
  Detection_ObjectClasses_descriptor_ = Detection_descriptor_->enum_type(0);
  Detections_descriptor_ = file->message_type(3);
  static const int Detections_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detections, image_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detections, detections_),
  };
  Detections_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Detections_descriptor_,
      Detections::default_instance_,
      Detections_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detections, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detections, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Detections));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_detections_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point2d_descriptor_, &Point2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Box_descriptor_, &Box::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Detection_descriptor_, &Detection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Detections_descriptor_, &Detections::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_detections_2eproto() {
  delete Point2d::default_instance_;
  delete Point2d_reflection_;
  delete Box::default_instance_;
  delete Box_reflection_;
  delete Detection::default_instance_;
  delete Detection_reflection_;
  delete Detections::default_instance_;
  delete Detections_reflection_;
}

void protobuf_AddDesc_detections_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020detections.proto\022\017doppia_protobuf\"\037\n\007P"
    "oint2d\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"a\n\003Box\022,\n\nm"
    "in_corner\030\001 \002(\0132\030.doppia_protobuf.Point2"
    "d\022,\n\nmax_corner\030\002 \002(\0132\030.doppia_protobuf."
    "Point2d\"\373\001\n\tDetection\022*\n\014bounding_box\030\001 "
    "\002(\0132\024.doppia_protobuf.Box\022>\n\014object_clas"
    "s\030\002 \002(\0162(.doppia_protobuf.Detection.Obje"
    "ctClasses\022\r\n\005score\030\003 \001(\002\"s\n\rObjectClasse"
    "s\022\007\n\003Car\020\002\022\016\n\nPedestrian\020\003\022\010\n\004Bike\020\005\022\r\n\t"
    "Motorbike\020\006\022\007\n\003Bus\020\007\022\010\n\004Tram\020\010\022\020\n\014Static"
    "Object\020\004\022\013\n\007Unknown\020\000\"P\n\nDetections\022\022\n\ni"
    "mage_name\030\001 \001(\t\022.\n\ndetections\030\002 \003(\0132\032.do"
    "ppia_protobuf.Detection", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "detections.proto", &protobuf_RegisterTypes);
  Point2d::default_instance_ = new Point2d();
  Box::default_instance_ = new Box();
  Detection::default_instance_ = new Detection();
  Detections::default_instance_ = new Detections();
  Point2d::default_instance_->InitAsDefaultInstance();
  Box::default_instance_->InitAsDefaultInstance();
  Detection::default_instance_->InitAsDefaultInstance();
  Detections::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_detections_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_detections_2eproto {
  StaticDescriptorInitializer_detections_2eproto() {
    protobuf_AddDesc_detections_2eproto();
  }
} static_descriptor_initializer_detections_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point2d::kXFieldNumber;
const int Point2d::kYFieldNumber;
#endif  // !_MSC_VER

Point2d::Point2d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point2d::InitAsDefaultInstance() {
}

Point2d::Point2d(const Point2d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point2d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point2d::~Point2d() {
  SharedDtor();
}

void Point2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2d_descriptor_;
}

const Point2d& Point2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_detections_2eproto();
  return *default_instance_;
}

Point2d* Point2d::default_instance_ = NULL;

Point2d* Point2d::New() const {
  return new Point2d;
}

void Point2d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point2d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point2d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point2d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point2d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point2d::MergeFrom(const Point2d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point2d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2d::CopyFrom(const Point2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point2d::Swap(Point2d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2d_descriptor_;
  metadata.reflection = Point2d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Box::kMinCornerFieldNumber;
const int Box::kMaxCornerFieldNumber;
#endif  // !_MSC_VER

Box::Box()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Box::InitAsDefaultInstance() {
  min_corner_ = const_cast< ::doppia_protobuf::Point2d*>(&::doppia_protobuf::Point2d::default_instance());
  max_corner_ = const_cast< ::doppia_protobuf::Point2d*>(&::doppia_protobuf::Point2d::default_instance());
}

Box::Box(const Box& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Box::SharedCtor() {
  _cached_size_ = 0;
  min_corner_ = NULL;
  max_corner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Box::~Box() {
  SharedDtor();
}

void Box::SharedDtor() {
  if (this != default_instance_) {
    delete min_corner_;
    delete max_corner_;
  }
}

void Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Box_descriptor_;
}

const Box& Box::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_detections_2eproto();
  return *default_instance_;
}

Box* Box::default_instance_ = NULL;

Box* Box::New() const {
  return new Box;
}

void Box::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_min_corner()) {
      if (min_corner_ != NULL) min_corner_->::doppia_protobuf::Point2d::Clear();
    }
    if (has_max_corner()) {
      if (max_corner_ != NULL) max_corner_->::doppia_protobuf::Point2d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .doppia_protobuf.Point2d min_corner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_corner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_max_corner;
        break;
      }

      // required .doppia_protobuf.Point2d max_corner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_corner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_corner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .doppia_protobuf.Point2d min_corner = 1;
  if (has_min_corner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->min_corner(), output);
  }

  // required .doppia_protobuf.Point2d max_corner = 2;
  if (has_max_corner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->max_corner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .doppia_protobuf.Point2d min_corner = 1;
  if (has_min_corner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->min_corner(), target);
  }

  // required .doppia_protobuf.Point2d max_corner = 2;
  if (has_max_corner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->max_corner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Box::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .doppia_protobuf.Point2d min_corner = 1;
    if (has_min_corner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_corner());
    }

    // required .doppia_protobuf.Point2d max_corner = 2;
    if (has_max_corner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_corner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Box* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Box*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_corner()) {
      mutable_min_corner()->::doppia_protobuf::Point2d::MergeFrom(from.min_corner());
    }
    if (from.has_max_corner()) {
      mutable_max_corner()->::doppia_protobuf::Point2d::MergeFrom(from.max_corner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Box::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_min_corner()) {
    if (!this->min_corner().IsInitialized()) return false;
  }
  if (has_max_corner()) {
    if (!this->max_corner().IsInitialized()) return false;
  }
  return true;
}

void Box::Swap(Box* other) {
  if (other != this) {
    std::swap(min_corner_, other->min_corner_);
    std::swap(max_corner_, other->max_corner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Box_descriptor_;
  metadata.reflection = Box_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Detection_ObjectClasses_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Detection_ObjectClasses_descriptor_;
}
bool Detection_ObjectClasses_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Detection_ObjectClasses Detection::Car;
const Detection_ObjectClasses Detection::Pedestrian;
const Detection_ObjectClasses Detection::Bike;
const Detection_ObjectClasses Detection::Motorbike;
const Detection_ObjectClasses Detection::Bus;
const Detection_ObjectClasses Detection::Tram;
const Detection_ObjectClasses Detection::StaticObject;
const Detection_ObjectClasses Detection::Unknown;
const Detection_ObjectClasses Detection::ObjectClasses_MIN;
const Detection_ObjectClasses Detection::ObjectClasses_MAX;
const int Detection::ObjectClasses_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Detection::kBoundingBoxFieldNumber;
const int Detection::kObjectClassFieldNumber;
const int Detection::kScoreFieldNumber;
#endif  // !_MSC_VER

Detection::Detection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Detection::InitAsDefaultInstance() {
  bounding_box_ = const_cast< ::doppia_protobuf::Box*>(&::doppia_protobuf::Box::default_instance());
}

Detection::Detection(const Detection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Detection::SharedCtor() {
  _cached_size_ = 0;
  bounding_box_ = NULL;
  object_class_ = 2;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Detection::~Detection() {
  SharedDtor();
}

void Detection::SharedDtor() {
  if (this != default_instance_) {
    delete bounding_box_;
  }
}

void Detection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Detection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Detection_descriptor_;
}

const Detection& Detection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_detections_2eproto();
  return *default_instance_;
}

Detection* Detection::default_instance_ = NULL;

Detection* Detection::New() const {
  return new Detection;
}

void Detection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bounding_box()) {
      if (bounding_box_ != NULL) bounding_box_->::doppia_protobuf::Box::Clear();
    }
    object_class_ = 2;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Detection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .doppia_protobuf.Box bounding_box = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounding_box()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_class;
        break;
      }

      // required .doppia_protobuf.Detection.ObjectClasses object_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_class:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::doppia_protobuf::Detection_ObjectClasses_IsValid(value)) {
            set_object_class(static_cast< ::doppia_protobuf::Detection_ObjectClasses >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // optional float score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Detection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .doppia_protobuf.Box bounding_box = 1;
  if (has_bounding_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bounding_box(), output);
  }

  // required .doppia_protobuf.Detection.ObjectClasses object_class = 2;
  if (has_object_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->object_class(), output);
  }

  // optional float score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Detection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .doppia_protobuf.Box bounding_box = 1;
  if (has_bounding_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bounding_box(), target);
  }

  // required .doppia_protobuf.Detection.ObjectClasses object_class = 2;
  if (has_object_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->object_class(), target);
  }

  // optional float score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Detection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .doppia_protobuf.Box bounding_box = 1;
    if (has_bounding_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounding_box());
    }

    // required .doppia_protobuf.Detection.ObjectClasses object_class = 2;
    if (has_object_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->object_class());
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Detection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Detection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Detection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Detection::MergeFrom(const Detection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bounding_box()) {
      mutable_bounding_box()->::doppia_protobuf::Box::MergeFrom(from.bounding_box());
    }
    if (from.has_object_class()) {
      set_object_class(from.object_class());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Detection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection::CopyFrom(const Detection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_bounding_box()) {
    if (!this->bounding_box().IsInitialized()) return false;
  }
  return true;
}

void Detection::Swap(Detection* other) {
  if (other != this) {
    std::swap(bounding_box_, other->bounding_box_);
    std::swap(object_class_, other->object_class_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Detection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Detection_descriptor_;
  metadata.reflection = Detection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Detections::kImageNameFieldNumber;
const int Detections::kDetectionsFieldNumber;
#endif  // !_MSC_VER

Detections::Detections()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Detections::InitAsDefaultInstance() {
}

Detections::Detections(const Detections& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Detections::SharedCtor() {
  _cached_size_ = 0;
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Detections::~Detections() {
  SharedDtor();
}

void Detections::SharedDtor() {
  if (image_name_ != &::google::protobuf::internal::kEmptyString) {
    delete image_name_;
  }
  if (this != default_instance_) {
  }
}

void Detections::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Detections::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Detections_descriptor_;
}

const Detections& Detections::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_detections_2eproto();
  return *default_instance_;
}

Detections* Detections::default_instance_ = NULL;

Detections* Detections::New() const {
  return new Detections;
}

void Detections::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::kEmptyString) {
        image_name_->clear();
      }
    }
  }
  detections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Detections::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detections;
        break;
      }

      // repeated .doppia_protobuf.Detection detections = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detections;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Detections::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string image_name = 1;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->image_name(), output);
  }

  // repeated .doppia_protobuf.Detection detections = 2;
  for (int i = 0; i < this->detections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detections(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Detections::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string image_name = 1;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_name(), target);
  }

  // repeated .doppia_protobuf.Detection detections = 2;
  for (int i = 0; i < this->detections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detections(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Detections::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string image_name = 1;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

  }
  // repeated .doppia_protobuf.Detection detections = 2;
  total_size += 1 * this->detections_size();
  for (int i = 0; i < this->detections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detections(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Detections::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Detections* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Detections*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Detections::MergeFrom(const Detections& from) {
  GOOGLE_CHECK_NE(&from, this);
  detections_.MergeFrom(from.detections_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Detections::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detections::CopyFrom(const Detections& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detections::IsInitialized() const {

  for (int i = 0; i < detections_size(); i++) {
    if (!this->detections(i).IsInitialized()) return false;
  }
  return true;
}

void Detections::Swap(Detections* other) {
  if (other != this) {
    std::swap(image_name_, other->image_name_);
    detections_.Swap(&other->detections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Detections::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Detections_descriptor_;
  metadata.reflection = Detections_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace doppia_protobuf

// @@protoc_insertion_point(global_scope)
