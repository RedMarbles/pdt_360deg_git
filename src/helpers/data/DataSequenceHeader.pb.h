// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataSequenceHeader.proto

#ifndef PROTOBUF_DataSequenceHeader_2eproto__INCLUDED
#define PROTOBUF_DataSequenceHeader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace doppia_protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataSequenceHeader_2eproto();
void protobuf_AssignDesc_DataSequenceHeader_2eproto();
void protobuf_ShutdownFile_DataSequenceHeader_2eproto();

class DataSequenceAttribute;
class DataSequenceHeader;

// ===================================================================

class DataSequenceAttribute : public ::google::protobuf::Message {
 public:
  DataSequenceAttribute();
  virtual ~DataSequenceAttribute();

  DataSequenceAttribute(const DataSequenceAttribute& from);

  inline DataSequenceAttribute& operator=(const DataSequenceAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSequenceAttribute& default_instance();

  void Swap(DataSequenceAttribute* other);

  // implements Message ----------------------------------------------

  DataSequenceAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataSequenceAttribute& from);
  void MergeFrom(const DataSequenceAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:doppia_protobuf.DataSequenceAttribute)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DataSequenceHeader_2eproto();
  friend void protobuf_AssignDesc_DataSequenceHeader_2eproto();
  friend void protobuf_ShutdownFile_DataSequenceHeader_2eproto();

  void InitAsDefaultInstance();
  static DataSequenceAttribute* default_instance_;
};
// -------------------------------------------------------------------

class DataSequenceHeader : public ::google::protobuf::Message {
 public:
  DataSequenceHeader();
  virtual ~DataSequenceHeader();

  DataSequenceHeader(const DataSequenceHeader& from);

  inline DataSequenceHeader& operator=(const DataSequenceHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSequenceHeader& default_instance();

  void Swap(DataSequenceHeader* other);

  // implements Message ----------------------------------------------

  DataSequenceHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataSequenceHeader& from);
  void MergeFrom(const DataSequenceHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .doppia_protobuf.DataSequenceAttribute attributes = 3;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  inline const ::doppia_protobuf::DataSequenceAttribute& attributes(int index) const;
  inline ::doppia_protobuf::DataSequenceAttribute* mutable_attributes(int index);
  inline ::doppia_protobuf::DataSequenceAttribute* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::doppia_protobuf::DataSequenceAttribute >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::doppia_protobuf::DataSequenceAttribute >*
      mutable_attributes();

  // @@protoc_insertion_point(class_scope:doppia_protobuf.DataSequenceHeader)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::doppia_protobuf::DataSequenceAttribute > attributes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DataSequenceHeader_2eproto();
  friend void protobuf_AssignDesc_DataSequenceHeader_2eproto();
  friend void protobuf_ShutdownFile_DataSequenceHeader_2eproto();

  void InitAsDefaultInstance();
  static DataSequenceHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// DataSequenceAttribute

// required string name = 1;
inline bool DataSequenceAttribute::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataSequenceAttribute::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataSequenceAttribute::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataSequenceAttribute::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataSequenceAttribute::name() const {
  return *name_;
}
inline void DataSequenceAttribute::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataSequenceAttribute::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataSequenceAttribute::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataSequenceAttribute::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DataSequenceAttribute::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataSequenceAttribute::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 2;
inline bool DataSequenceAttribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataSequenceAttribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataSequenceAttribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataSequenceAttribute::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& DataSequenceAttribute::value() const {
  return *value_;
}
inline void DataSequenceAttribute::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void DataSequenceAttribute::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void DataSequenceAttribute::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataSequenceAttribute::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* DataSequenceAttribute::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataSequenceAttribute::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataSequenceHeader

// repeated .doppia_protobuf.DataSequenceAttribute attributes = 3;
inline int DataSequenceHeader::attributes_size() const {
  return attributes_.size();
}
inline void DataSequenceHeader::clear_attributes() {
  attributes_.Clear();
}
inline const ::doppia_protobuf::DataSequenceAttribute& DataSequenceHeader::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::doppia_protobuf::DataSequenceAttribute* DataSequenceHeader::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::doppia_protobuf::DataSequenceAttribute* DataSequenceHeader::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::doppia_protobuf::DataSequenceAttribute >&
DataSequenceHeader::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::doppia_protobuf::DataSequenceAttribute >*
DataSequenceHeader::mutable_attributes() {
  return &attributes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace doppia_protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataSequenceHeader_2eproto__INCLUDED
